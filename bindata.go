// Code generated by go-bindata.
// sources:
// import/Procfile
// import/import.py
// import/manifest.yml
// export/.DS_Store
// export/Procfile
// export/export.py
// export/manifest.yml
// pycommon/common.py
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _importProcfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\x52\x28\xa8\x2c\xc9\xc8\xcf\x33\x56\xc8\xcc\x2d\xc8\x2f\x2a\xd1\x2b\xa8\x04\x04\x00\x00\xff\xff\x27\x80\x25\x86\x16\x00\x00\x00")

func importProcfileBytes() ([]byte, error) {
	return bindataRead(
		_importProcfile,
		"import/Procfile",
	)
}

func importProcfile() (*asset, error) {
	bytes, err := importProcfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "import/Procfile", size: 22, mode: os.FileMode(420), modTime: time.Unix(1478029721, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _importImportPy = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\x4f\x6f\xfb\x36\x0c\xbd\xfb\x53\x70\xf9\x1d\x64\xb7\x89\x8b\x2d\x97\xa1\x80\x0f\x45\x17\x0c\x05\x86\xad\x48\xb2\x02\x43\x10\x08\x8e\x4d\xa7\x5a\x6d\xc9\x13\xe5\xb4\x41\xd7\xef\x3e\xe8\x8f\x9b\xa6\x71\x8b\x1d\x7a\xf8\xe9\x10\x58\x14\xf9\xf8\xf8\x42\xf2\xdb\x0f\x17\x1d\xe9\x8b\x8d\x90\x17\x28\x77\xd0\xee\xcd\xbd\x92\xd3\xe8\x1b\xc0\xe4\x6c\x02\x85\x2a\x85\xdc\x5e\x42\x67\xaa\xc9\xcf\xd6\x12\x89\xa6\x55\xda\x00\xed\xa9\xff\xfc\x9b\x94\xec\xbf\x15\x45\x95\x56\x0d\x14\xaa\x69\x94\x84\x60\x3d\x8b\xa2\x12\x2b\xa8\x84\x2c\x39\x4d\xf9\xa6\x2b\x1e\xd0\xf0\x42\x63\x49\x71\x72\x19\x01\x00\xd0\x14\x32\x87\x94\xd6\x2a\x2f\x29\x56\x94\xa2\xdc\x09\xad\x64\xba\x45\x13\xb3\xc5\xf2\x8f\xf9\x8c\x5f\xcf\x67\xbf\xcc\x7e\x5f\xde\x5c\xfd\xb6\x60\x49\xe2\x02\x45\x05\x4c\xe3\x56\x28\xc9\x40\x48\xa0\xa9\xc7\xb3\x47\xa3\xe9\xb4\x35\xad\x58\x5e\x14\x48\xc4\x1f\x70\xcf\x45\xc9\xd6\x63\x67\x24\x2c\x34\x1a\x7e\x78\xeb\x1f\x3c\xc1\xfe\x16\xd0\xd7\xd1\x17\x61\x32\xe6\xe5\xd0\x48\x46\x69\xe4\xcd\x9e\xfe\xa9\xb9\x95\x8d\xd3\x34\x76\xaa\x04\x51\x3c\xca\x18\x3c\xe8\x18\x3c\xc6\x18\x3c\x23\xc8\x3e\x50\x34\x08\xca\x8b\xa6\x84\x0c\x36\x9d\xa8\x9d\xd3\xd6\x7a\xa8\xa6\xc9\x65\x19\xbf\x47\xf6\x88\x7d\x06\x8f\xe0\x79\x59\xcc\x57\x94\x83\x89\x93\xd1\x81\xab\x73\x0e\xc0\x90\x01\x7b\x7e\x81\x7f\xc1\xf6\x93\xf3\x86\xe7\x17\x96\x56\x4a\x37\xb9\x89\x3d\xa7\xf1\x1b\x64\x1f\xac\x28\xa5\x3d\x19\x6c\xe2\x00\x93\x1c\x2b\xd4\x7e\x9f\x02\xb5\x27\xfa\x38\x0b\xca\xdd\x67\xca\x3c\xbf\x38\x71\xda\x2d\x0f\xe5\xc1\x64\xe2\xf5\xc9\x8a\x8e\x8c\x6a\x4e\xe4\x6a\xff\x9f\x5a\x7e\xd8\x78\x99\x9b\xbc\x9f\x2a\x51\xc1\x61\x90\x56\xec\xee\xfa\xea\x96\x2f\x66\xf3\xbb\x9b\xeb\xd9\x82\xad\x0f\x93\xb2\x2b\xf2\xf6\xf3\xf9\x3b\x0e\x0d\xb3\xe7\x64\x44\xbd\x13\x05\x12\x64\x0e\x65\xc5\xf2\x47\x9a\xe8\x92\xc2\xbc\xd8\x53\x29\xdd\xbb\xb9\x11\x0d\x11\x87\xf4\x81\x6a\x78\x58\x31\x99\x37\xc8\xd6\x90\x65\xf0\x9e\xc6\xf2\x6a\xfe\xeb\x6c\xd9\x13\x61\xc9\x31\x86\x93\xdb\x2a\x0f\xd9\x01\xcc\x1a\x50\x1a\x91\xd7\x6f\x39\xf5\xa7\xad\x73\xf9\xd6\xdb\xde\x07\xdc\xec\x96\xa1\xa9\xdb\x30\xc3\x9b\x69\xf9\xd7\xed\x20\x9d\x10\x3c\x72\x2d\x3f\xb2\xf1\x36\xc3\xb0\x9f\xe3\xa3\x85\x34\xf1\xa8\x52\x9d\x2c\x61\xe3\x7e\x69\x1a\xba\x0e\x6c\x1b\xf9\xa1\xb2\x7f\xf2\x26\x27\x4c\xe1\x51\xd4\x35\x18\xbd\x07\xa3\xfa\x75\xeb\x36\xf0\x6b\xd4\x28\xf9\x30\xd9\x67\x1b\x68\x30\x08\x6b\x5b\x4b\xfb\x45\xa5\xb4\x5f\x5f\xc9\xc0\xa6\x18\x8c\xf1\x6b\xfc\xe4\x09\x6b\xc2\xe1\x82\x42\x31\x7f\xca\x7c\x53\xa3\x65\x58\x62\x21\x4a\x84\x7b\xf5\x68\x6f\x9b\xbc\x78\xe8\x5a\x2f\x08\x8c\xe0\xdc\xf7\xd5\x39\x8c\x52\x98\x3d\x09\x23\xe4\x36\xfd\x80\x3d\xed\x29\xc5\x27\x61\xe2\x1f\xc3\x52\x39\x49\xd4\xa3\x07\x80\xd7\x80\x9f\x92\x88\xd0\x74\x6d\x9c\x44\x47\xa3\x1f\xe9\x4e\x72\xdb\xd0\xa8\xe3\x24\x8a\xfe\x0b\x00\x00\xff\xff\x39\x97\xb1\x36\xe1\x07\x00\x00")

func importImportPyBytes() ([]byte, error) {
	return bindataRead(
		_importImportPy,
		"import/import.py",
	)
}

func importImportPy() (*asset, error) {
	bytes, err := importImportPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "import/import.py", size: 2017, mode: os.FileMode(420), modTime: time.Unix(1478262887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _importManifestYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\xcb\xcd\x4a\xc3\x40\x14\xc5\xf1\xfd\x3c\xc5\x79\x81\x69\x50\xd1\xc5\xec\x4a\x1c\xa4\x50\xb5\x24\x41\x70\x15\x26\x93\xd1\x5c\xed\x7c\x90\xb9\x29\xe6\xed\x25\x6d\xad\xdd\xfe\xcf\xef\x98\x94\xf6\x64\x0d\x53\x0c\x59\x09\x89\x6e\xa2\x7d\x9f\x8c\xfd\x56\x18\x98\x53\x56\x45\xf1\x49\x3c\x4c\xdd\xca\x46\x5f\x7c\xd9\x6c\x23\x33\x11\x15\xf6\x43\x5e\xac\xec\x3b\xe9\x7e\x52\x1c\x59\x00\x36\x7a\x6f\x42\xaf\x90\x66\x1e\x62\xb8\x03\xf9\x65\x59\xa5\x59\x00\x14\x32\x9b\x60\x5d\x56\xb8\x11\x80\x77\x3e\x8e\xb3\xc2\xed\xfd\xc3\xb3\x00\x82\xf1\x4e\x9d\xbd\xec\xbb\xa5\x44\x39\xc6\x89\x9d\x02\x8f\x93\x13\x40\x76\xe3\x81\x96\xbf\x00\x24\x2a\xbd\xdb\xae\x4b\xdd\x36\xeb\xea\x49\x37\x02\x70\xe1\xb0\x2c\xc0\xa9\xb4\xb5\xae\xde\x36\xa5\x56\x7f\xf2\x94\xcf\xf5\x08\xeb\xe6\xb5\xd2\x6d\xf3\xbe\xfb\x47\xc7\xb4\x94\x2b\x50\x56\xfa\x51\xbf\x34\x9b\xf5\xb6\xbe\xb8\xab\x26\x7e\x03\x00\x00\xff\xff\x2a\x56\xd5\xe8\x48\x01\x00\x00")

func importManifestYmlBytes() ([]byte, error) {
	return bindataRead(
		_importManifestYml,
		"import/manifest.yml",
	)
}

func importManifestYml() (*asset, error) {
	bytes, err := importManifestYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "import/manifest.yml", size: 328, mode: os.FileMode(420), modTime: time.Unix(1478123245, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exportDs_store = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\xd8\x31\x0a\x02\x31\x10\x85\xe1\x37\x31\x45\xc0\x26\xa5\x65\x1a\x0f\xe0\x0d\xc2\xb2\x9e\xc0\x0b\x58\x78\x05\xfb\x1c\x5d\x96\x79\x60\x60\xd5\x4e\x8c\xcb\xfb\x40\xfe\x05\x37\x2a\x16\x31\x23\x00\x9b\xee\xb7\x13\x90\x01\x24\x78\x71\xc4\x4b\x89\x8f\x95\xd0\x5d\x1b\x5f\x43\x44\x44\x44\xc6\x66\x9e\xb4\xff\xf5\x07\x11\x91\xe1\x2c\xfb\x43\x61\x2b\xdb\xbc\xc6\xe7\x03\x1b\xbb\x35\x99\x2d\x6c\x65\x9b\xd7\x78\x5f\x60\x23\x9b\xd8\xcc\x16\xb6\xb2\xcd\xcb\x4d\xcb\x38\x7c\x18\xdf\xd9\x38\xa1\x18\xa7\x10\x2b\x6c\xfd\xce\x77\x23\xf2\xef\x76\x9e\xbc\xfc\xfe\x9f\xdf\xcf\xff\x22\xb2\x61\x16\xe7\xcb\x3c\x3d\x07\x82\xf5\x0d\x00\xae\xdd\xf5\xa7\x43\x40\xf0\x3f\x0b\x0f\xdd\x5a\x1d\x04\x44\x06\xf3\x08\x00\x00\xff\xff\x6a\x00\x88\x6d\x04\x18\x00\x00")

func exportDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_exportDs_store,
		"export/.DS_Store",
	)
}

func exportDs_store() (*asset, error) {
	bytes, err := exportDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "export/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1478107017, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exportProcfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\x52\x28\xa8\x2c\xc9\xc8\xcf\x33\x56\x48\xad\x28\xc8\x2f\x2a\xd1\x2b\xa8\xe4\x02\x04\x00\x00\xff\xff\xc8\x71\x30\x6b\x17\x00\x00\x00")

func exportProcfileBytes() ([]byte, error) {
	return bindataRead(
		_exportProcfile,
		"export/Procfile",
	)
}

func exportProcfile() (*asset, error) {
	bytes, err := exportProcfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "export/Procfile", size: 23, mode: os.FileMode(420), modTime: time.Unix(1478106260, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exportExportPy = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x54\x3d\x6f\xdb\x30\x10\xdd\xf5\x2b\xae\xce\x40\x29\xb1\x95\xb6\x5a\x8a\x00\x1a\x8a\xc0\x43\xa7\x16\x09\x92\xc5\x30\x08\x4a\xa2\x1c\x36\x12\xa9\xf2\x28\x27\x42\x9a\xff\x5e\xf0\x43\x56\x12\xdb\x28\x0a\x64\x28\x07\x9b\xe4\xdd\xbd\xbb\xf7\x74\xc7\x93\x0f\xe7\x3d\xea\xf3\x42\xc8\x73\x2e\xb7\xd0\x0d\xe6\x4e\xc9\x2c\x3a\x01\x58\x9c\x2e\xa0\x54\x95\x90\x9b\x0b\xe8\x4d\xbd\xf8\x62\x6f\x22\xd1\x76\x4a\x1b\xc0\x01\xc7\xed\x4f\x54\x72\xdc\x2b\x9c\x76\x69\xc7\xcc\x5d\x54\x6b\xd5\x42\xa9\xda\x56\x49\x08\xa6\xd3\x28\xaa\x78\x0d\x05\x2b\xef\xfb\x8e\xb6\x03\xfe\x6a\xa8\x51\x14\xb3\xb8\xd4\xbc\xc2\x39\x6c\x4b\xd6\x25\x17\x11\x00\x00\x2b\x4b\x8e\x38\x07\xe4\xa5\xe6\x66\x0e\x45\x5f\xde\xdb\x7f\xcd\x37\x42\x49\xc8\xa1\x16\xb2\xa2\x98\x51\x6f\xa0\x0e\x21\x76\x00\x2e\x1e\x33\x5a\xb6\x15\xe4\x50\xf4\xa2\x71\x8e\xa5\xea\x06\x6a\x0b\x62\xb2\x8a\xdf\xc2\x7b\xd8\x31\x8d\x87\xf0\x05\x5a\xe0\x1d\xcc\x74\x45\xd1\x68\x5f\xb6\x77\x0e\xc0\x90\x03\xb1\x92\x3a\xc7\xaa\x6f\x3b\x78\x7a\x86\xdf\xf0\xf4\x4c\xd2\x5a\xe9\x96\x99\x78\x82\x98\x87\x22\x3d\x80\xc2\x14\x07\x34\xbc\x8d\x03\x54\xf2\x4a\xad\xee\x3f\x17\xab\xdb\xd3\xca\xdd\x70\xb9\x3d\xa2\xd2\xd3\x33\x58\xa1\xba\x0d\x75\x32\x2d\x16\x5e\x9f\xbc\xec\xd1\xa8\xf6\xb5\x66\xdd\xbf\x49\x76\x9c\xed\x45\xa0\x0b\xb9\x93\x6f\x45\x30\x23\xeb\xd5\xc7\xf5\x8a\x58\x27\x2e\x8d\x60\x0d\x92\xb5\xf3\x12\x35\x10\xcf\x94\x80\x90\x80\x99\x0f\xb6\x4b\x73\xd3\x6b\x7b\xb5\x22\x5e\x1b\x7a\xcf\x07\x2a\x2a\xb2\x9e\xbb\x4b\x2f\x14\x9d\x6c\xa3\xc1\x57\x34\x9e\x02\xba\x4f\xf7\x0e\x98\x84\xbc\x6c\x99\x38\xb0\x15\xb5\x15\x8a\xcb\xad\xd0\x4a\xae\xc8\xed\xe5\xd7\x1f\xf4\x7a\x79\x75\xfb\xed\x72\x79\x4d\xd6\x13\x29\x2b\x08\xe4\x6e\xaa\xd3\x46\xb1\x0a\xe3\x29\x2c\xdd\x70\x13\xbf\x09\x4d\x92\x5d\x28\x72\xbd\x15\x25\xc7\x9d\xac\xec\x01\x17\xba\x1a\x95\xb4\xab\x56\x7a\x74\x73\x6a\x86\x88\x29\x7d\x28\x35\x18\x56\x44\xb2\x96\x93\x35\xe4\x39\xbc\x2d\xe3\xfa\xfb\xcd\xd5\xe5\x72\x2c\x84\x24\xaf\x31\x5c\x9b\xd9\x2f\x0e\xf9\x04\xb6\xff\x75\x5f\xae\xae\x61\xf2\xa5\xb7\x3d\x1f\x70\xb3\x0d\x81\x99\x6b\x06\xcb\x72\x3f\x6d\x70\x9a\xb9\x11\x9f\x59\x3f\x8b\x74\xd8\xcf\xe5\xd5\x42\x9a\x78\x56\xab\x5e\x56\x50\xb8\x5f\xcc\xc2\x54\x81\x1d\x13\x07\x04\x15\x33\xac\x60\xc8\x53\x78\x10\x4d\x03\x46\x0f\x60\x14\xf0\x47\xf7\xa6\x1a\x35\xc5\xcc\x92\xa3\xa9\xfe\xf2\xe6\x1e\xa5\xd2\xbd\x13\x93\xee\x9d\x89\x1c\x79\x0e\x0f\x86\xf9\xc9\xda\x33\xf1\x06\xf9\x61\x46\x81\xcd\x8d\x64\x45\xc3\x6d\x61\x15\x2f\x45\xc5\xe1\x4e\x3d\xd8\x93\x2f\xc1\x2b\x02\x33\x38\xf3\xfd\x73\x06\xb3\x14\x96\x8f\xc2\x08\xb9\x49\x8f\x10\xc0\x01\x53\xfe\x28\x4c\xfc\x29\x3c\x9a\x7b\x89\x46\xf4\x00\xb0\x0b\xf8\x9c\x44\x11\x72\x63\xa7\x3a\x1a\xc7\x3b\xd2\xbd\xa4\xb6\x69\xb9\x8e\x93\xe8\x4f\x00\x00\x00\xff\xff\x32\xbf\xcd\x64\xd0\x07\x00\x00")

func exportExportPyBytes() ([]byte, error) {
	return bindataRead(
		_exportExportPy,
		"export/export.py",
	)
}

func exportExportPy() (*asset, error) {
	bytes, err := exportExportPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "export/export.py", size: 2000, mode: os.FileMode(420), modTime: time.Unix(1478262882, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exportManifestYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcb\xc1\x4a\xc4\x30\x14\x85\xe1\x7d\x9e\xe2\xbc\x40\xa6\xa8\xe8\xe2\xee\xa4\x74\x21\x28\x23\x1d\x75\x3b\xa4\x69\xb4\x57\x27\xb9\x21\xb9\x1d\xec\xdb\x4b\xe9\x28\xb8\xfd\xcf\x77\x5c\xce\x27\xf6\x4e\x59\x52\x25\x63\x31\xcc\x7c\x1a\xb3\xf3\x5f\x84\x49\x35\x57\x6a\x9a\x0f\xd6\x69\x1e\x76\x5e\x62\xf3\xe9\xab\x17\x55\x66\x6e\xfc\xbb\xfd\xb3\x76\x1c\x6c\xf8\xce\x52\xd4\x00\x5e\x62\x74\x69\x24\xe4\x45\x27\x49\x37\xd8\x96\x5d\x5e\x0c\xc0\xa9\xaa\x4b\x3e\x54\xc2\x95\x01\x62\x88\x52\x16\xc2\xf5\xed\xdd\x93\x01\x92\x8b\x81\x2e\xde\x8e\xc3\x5a\xc4\x16\x99\x35\x10\xb4\xcc\xc1\x00\x35\x94\x33\xaf\x7f\x03\x58\xf4\xdd\xf3\xe3\x7d\xdb\x1d\x0f\xfb\xd7\xbe\xed\xfe\xa7\x97\x7d\xbf\x96\x90\xce\xab\x05\x36\x73\x3c\x74\xfd\xdb\x43\xdb\xd1\x2f\xdc\xf2\xa5\x9a\x9f\x00\x00\x00\xff\xff\xaf\x08\xf4\xd3\x0f\x01\x00\x00")

func exportManifestYmlBytes() ([]byte, error) {
	return bindataRead(
		_exportManifestYml,
		"export/manifest.yml",
	)
}

func exportManifestYml() (*asset, error) {
	bytes, err := exportManifestYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "export/manifest.yml", size: 271, mode: os.FileMode(420), modTime: time.Unix(1478111046, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pycommonCommonPy = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x5d\x6b\xe3\x38\x14\x7d\xcf\xaf\xb8\xe3\x3e\x38\x5e\xfc\x51\xe8\xcb\x10\xf0\x43\x36\xf5\xb6\xc3\x2e\xdb\x10\x7b\x18\x96\x65\x10\x8a\x7d\x93\x88\xb5\x25\x57\x57\x76\x28\x21\xfb\xdb\x17\xd9\x4e\xea\x74\x33\xa5\x8f\xf3\x62\xa4\xab\xa3\x73\xcf\x39\x82\xeb\x9b\x4f\x51\x43\x3a\x5a\x0b\x19\xa1\x6c\xa1\x7e\x31\x3b\x25\xef\x26\x37\x00\xc1\x2f\x01\xe4\xaa\x10\x72\x3b\x83\xc6\x6c\x82\xcf\xb6\x32\x99\x88\xaa\x56\xda\x80\xa2\xd3\x6a\x67\x4c\x1d\x12\xea\x16\xf5\xa9\x44\x2a\xff\x07\xcd\x50\x9b\x14\xb8\x81\x75\x23\xca\x82\xd5\xf4\x5c\x32\x94\xed\x34\xd7\x58\x90\x37\x9b\x00\x00\x68\x34\x8d\x96\xe0\x2e\x1f\x1e\x9f\xd2\x2c\x3e\x1c\x61\xf9\x70\x3f\xcf\xe6\xbf\xce\xd3\xa4\xdf\x7d\x4d\x93\x55\xbf\x5a\xce\xd3\xf4\xdb\xd3\xea\x3e\x3e\x1c\xdd\x70\xa3\x74\xc5\x4d\xcf\xf5\xb7\xbb\x53\x64\xdc\xef\x3e\x0c\xdb\x62\xcd\x24\xaf\x70\x54\x69\x08\xf5\x9b\x52\xcd\x89\xf6\x4a\x17\xee\x77\x6f\x2c\xb3\x7a\xb1\x3a\x2d\x86\x91\xd1\x57\xc5\x06\x0d\x1c\x8e\x10\xd4\xf6\xb3\xb3\xcb\xff\x0b\x7a\xb7\xdf\xb9\xf4\x23\xd9\xde\x64\xac\x88\xee\x58\xae\xea\x17\x96\xab\xaa\xe2\xb2\x98\xf2\x3c\x47\x22\x1f\x08\x73\x8d\xc6\x07\x8d\x5b\xa1\xa4\x0f\xeb\xc6\x06\x3f\x68\xe5\x7b\x82\x18\xb6\x68\x18\xdf\x13\xcb\x4b\xc1\x4a\x95\x73\x23\x94\x9c\x7a\x1d\xc0\x3e\x78\x3c\x74\xb0\x10\x94\x2d\x6b\xb9\xfe\x01\xbb\x77\x11\x40\x67\x19\xe8\x0e\xf2\x1a\x02\xa0\xbb\x59\x14\x1d\x8e\x51\xb1\x0e\xe9\xb9\x3c\x27\x81\xb2\xf5\xad\x8c\xb3\xb0\x37\x9e\xac\xb6\x9f\xd3\xd2\xa5\x21\x08\x3e\x66\xe9\x03\x1d\x67\x23\x99\xee\xfc\x5b\xca\xe6\x8b\x45\x92\xa6\xec\xf7\xe4\x2f\xf6\xe5\x3e\x76\x0e\x47\x07\x6c\x39\x4d\x16\xab\x24\x1b\x9d\x76\x47\x67\x19\x97\xec\xbd\x0f\xb1\x19\x9a\xc0\xa7\x18\x5c\xb7\xef\x34\xea\x76\x38\x76\xcc\xf7\xc9\x6f\xf3\xaf\x7f\x64\x6c\x95\x3c\x7c\x79\xfa\xf3\x92\xb6\x73\x77\x25\x1b\x94\x6d\xef\x53\x48\x32\xbc\x2c\x4f\xf1\x4f\x07\x3f\x8a\x42\x7a\x21\x83\xd5\xd4\xe1\x7b\xca\x4b\x11\xac\x1b\x59\x94\x18\x5d\xee\x86\xdb\x10\xac\xe1\xdf\x6e\xe4\xf0\x3d\x39\x43\x82\xd7\x1f\x75\x76\x72\xa6\x28\xac\xb9\xd9\x85\x82\x36\xa2\xc4\xa9\x13\xed\x54\x85\x51\x9b\xf3\xfa\x95\xe8\xd5\xf1\x20\xfb\x1a\xaa\xcf\xbf\x7c\x9f\x92\xd7\x1f\xa5\x1d\x23\xc7\x89\x39\x4e\x6f\x8b\xd0\x34\xf5\xd9\xc7\xdb\xf4\x7a\x8c\x6e\x24\xeb\x87\xe5\x09\x78\x03\x0b\x8d\xdc\x20\x70\xe8\x0f\x40\x48\x50\xba\x40\x0d\x46\x41\xa1\xf6\xb2\x54\xbc\x00\xb3\x43\xb0\xda\x29\xec\x6e\x2d\x9f\x56\x19\xc4\x20\xa4\x99\x2a\x0a\xb7\x68\xec\xa8\x75\x6d\xd5\xf5\xc1\xfd\x7c\x7b\x7b\xeb\x7a\xde\xa4\x83\x3e\x72\xfb\x20\x1a\xe2\xf1\xf8\x0e\x53\x51\xd5\x25\x3e\x66\xd9\x72\x85\xcf\x0d\x92\x19\x60\xfd\x1d\x8b\x2c\x20\xbe\x98\xee\x61\xb6\x58\xa6\xbd\xf4\xa9\xe3\xf8\x9d\x04\xcf\x3f\xd1\x0f\xcd\x6a\x6d\x25\x39\xf6\x86\x90\x5b\xe0\x06\xec\x5f\xe2\x84\x7e\xe5\xee\x65\xb0\x8d\xd2\xd8\x65\xf1\x5f\x00\x00\x00\xff\xff\xa4\xf3\xab\xf8\x9c\x06\x00\x00")

func pycommonCommonPyBytes() ([]byte, error) {
	return bindataRead(
		_pycommonCommonPy,
		"pycommon/common.py",
	)
}

func pycommonCommonPy() (*asset, error) {
	bytes, err := pycommonCommonPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pycommon/common.py", size: 1692, mode: os.FileMode(420), modTime: time.Unix(1478205467, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"import/Procfile":     importProcfile,
	"import/import.py":    importImportPy,
	"import/manifest.yml": importManifestYml,
	"export/.DS_Store":    exportDs_store,
	"export/Procfile":     exportProcfile,
	"export/export.py":    exportExportPy,
	"export/manifest.yml": exportManifestYml,
	"pycommon/common.py":  pycommonCommonPy,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"export": &bintree{nil, map[string]*bintree{
		".DS_Store":    &bintree{exportDs_store, map[string]*bintree{}},
		"Procfile":     &bintree{exportProcfile, map[string]*bintree{}},
		"export.py":    &bintree{exportExportPy, map[string]*bintree{}},
		"manifest.yml": &bintree{exportManifestYml, map[string]*bintree{}},
	}},
	"import": &bintree{nil, map[string]*bintree{
		"Procfile":     &bintree{importProcfile, map[string]*bintree{}},
		"import.py":    &bintree{importImportPy, map[string]*bintree{}},
		"manifest.yml": &bintree{importManifestYml, map[string]*bintree{}},
	}},
	"pycommon": &bintree{nil, map[string]*bintree{
		"common.py": &bintree{pycommonCommonPy, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
