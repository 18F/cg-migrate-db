// Code generated by go-bindata.
// sources:
// import/Procfile
// import/import.py
// import/manifest.yml
// export/Procfile
// export/export.py
// export/manifest.yml
// pycommon/common.py
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _importProcfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\x52\x28\xa8\x2c\xc9\xc8\xcf\x33\x56\xc8\xcc\x2d\xc8\x2f\x2a\xd1\x2b\xa8\x04\x04\x00\x00\xff\xff\x27\x80\x25\x86\x16\x00\x00\x00")

func importProcfileBytes() ([]byte, error) {
	return bindataRead(
		_importProcfile,
		"import/Procfile",
	)
}

func importProcfile() (*asset, error) {
	bytes, err := importProcfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "import/Procfile", size: 22, mode: os.FileMode(420), modTime: time.Unix(1480436076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _importImportPy = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\xcc\x3a\x07\x4a\x89\xed\x60\xd7\x97\x45\x00\x1f\x82\xd4\x28\x02\x14\x6d\x60\xbb\x01\x0a\xc3\x20\x64\x89\x72\xd8\x48\xa4\x4a\x52\x49\x8d\x34\xff\xbd\xc3\x0f\xf9\x23\x56\x82\x1e\x72\x28\x0f\x86\x38\x9c\x79\x7c\xf3\x38\x33\x3e\xf9\xe7\xbc\xd1\xea\x7c\xc5\xc5\x39\x13\x0f\x50\x6f\xcc\x9d\x14\xa3\xe8\x04\x60\x70\x3a\x80\x4c\xe6\x5c\xac\x2f\xa0\x31\xc5\xe0\x7f\x6b\x89\x78\x55\x4b\x65\x40\x6f\x74\xfb\xf9\x5d\x4b\xd1\x7e\x4b\x1d\x15\x4a\x56\x18\x57\x55\x52\x40\xb0\x9e\x46\x51\xce\x0a\x28\xb8\xc8\xa9\x1e\xd1\x55\x93\xdd\x33\x43\x33\xc5\x72\x1d\x27\x17\x11\xe0\xd2\x23\x18\x3b\xa4\x61\x29\x53\x34\x4b\x3d\x44\x3a\x5c\xa1\x61\xcd\x4c\x4c\x66\xf3\x2f\xd3\x09\xbd\x9a\x4e\x3e\x4c\x3e\xcf\xaf\x2f\x3f\xcd\x48\x92\xb8\x40\x5e\x00\x51\x6c\xcd\xa5\x20\xc0\x05\xe2\x78\x3c\xbb\x14\x33\x8d\xb2\xa6\x05\x49\xb3\x8c\x69\x4d\xef\xd9\x86\xf2\x9c\x2c\xfb\xce\xa8\x19\x52\x30\x74\x77\xd6\x1e\x78\x82\xed\x2e\xa0\x2f\xa3\x77\xc2\x24\xc4\xcb\xa1\x98\x36\x52\x31\x5a\x6d\xf4\x8f\x92\x5a\xd9\x50\x9c\xd8\xa9\x12\x44\xf1\x28\x18\xef\x40\xfb\xe0\x31\xfa\xe0\x19\xa1\x60\xdd\x8a\x06\x41\x69\x56\xe5\xe8\xb3\x6a\x78\xe9\x9c\xd6\xd6\x03\xdf\x25\x15\x79\xfc\x12\xd9\x23\xb6\x37\x78\x04\xcf\xcb\x62\x6e\x51\x76\x26\xaa\x8d\x0a\x5c\x9d\x73\x00\x46\x4f\xf2\xf4\x0c\xbf\xc0\xd6\x93\xf3\x86\xa7\x67\x32\x2c\xa4\xaa\x52\x13\x7b\x4e\xfd\x3d\x64\x1f\x8c\x8f\x8d\xf5\x64\x58\x15\x07\x98\xe4\x50\xa1\xfa\xef\x14\xa8\x3e\xd2\xc7\x59\xb0\x6e\xdf\x52\x06\x7f\xac\x38\xf5\x9a\x86\xf4\x60\x30\xf0\xfa\x8c\xb3\x06\x0d\xd5\x91\x5c\xf5\x9f\xa9\xe5\x9b\x8d\xe6\xa9\x49\xdb\xae\xc2\xe6\xd8\x35\xd2\x82\xdc\x5e\x5d\xde\xd0\xd9\x64\x7a\x7b\x7d\x35\x99\x91\xe5\xae\x53\x1e\xb2\xb4\x7e\xbb\xff\x0e\x43\x43\xef\x39\x19\x99\x7a\xe0\xa8\x15\x86\x5b\x14\xef\x9d\x3e\xea\x81\xca\x35\xe9\xc3\x62\x99\xc0\xd9\xde\xc9\xd6\xba\x05\xc0\x64\x5b\x10\xd7\xc0\x01\x6f\x47\x2e\x24\x12\x0e\x16\x44\xa4\x15\x23\x4b\x18\x8f\xe1\x25\xc9\xf9\xe5\xf4\xe3\x64\xde\xd2\x24\xc9\x21\x86\x7b\x0c\xfb\x2e\x48\x75\x0b\x66\x0d\x4c\x18\x9e\x96\x3a\x74\xf8\xfe\xaa\xcb\x54\xec\x7b\xdb\x7d\x87\x9b\x9d\x41\x7a\xe4\xe6\x4f\xf7\xdc\x9a\x7f\xbb\xe9\xa4\x13\x82\x7b\xae\x21\x7a\x36\xde\xde\xd0\xed\xe7\xf8\x28\x2e\x4c\xdc\x2b\x64\x83\x05\xb5\x72\xbf\x38\x38\x7d\x4d\x82\x2d\x32\xdf\x72\xb6\x04\x56\xa9\x66\x43\x78\xe4\x65\x09\x46\x6d\xc0\xc8\x76\x18\xbb\xf9\xbc\x8d\xea\x25\xaf\x5e\xf6\xd6\x7c\xea\x0c\x62\xa5\xcd\xa5\x7e\xa7\x54\xea\xf7\xcf\xa4\x63\x8e\x74\xc6\xf8\x21\x7f\x74\xc4\x4a\xcd\xba\x13\x0a\xc9\x7c\x15\xe9\xaa\x64\x96\x61\xce\x32\x9e\x33\xb8\x93\x8f\x76\xb7\x4a\xb3\xfb\xa6\xf6\x82\x40\x0f\xfb\xc1\xd5\xd5\x19\xf4\x86\x30\xf9\xc9\x0d\xfe\xc3\x0e\x5f\x61\x8f\x8d\x3e\x64\xe8\x12\xff\x1b\x46\xce\xd1\x45\x2d\x7a\x00\xd8\x06\xfc\x97\x44\x1a\xd3\xa8\x71\xda\x1d\x0c\x86\x48\x35\x82\xda\x82\x66\x0a\x37\xd1\xef\x00\x00\x00\xff\xff\x54\x12\xd5\xb6\xff\x07\x00\x00")

func importImportPyBytes() ([]byte, error) {
	return bindataRead(
		_importImportPy,
		"import/import.py",
	)
}

func importImportPy() (*asset, error) {
	bytes, err := importImportPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "import/import.py", size: 2047, mode: os.FileMode(420), modTime: time.Unix(1480436809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _importManifestYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\xcc\xcd\x4e\xc3\x30\x0c\xc0\xf1\x7b\x9f\xc2\x2f\x90\x55\x80\xe0\x90\x5b\x55\x22\x34\x69\xc0\xd4\x56\x48\x9c\xa6\x34\x0d\xd4\xb0\x7c\xa8\x71\x27\xfa\xf6\x38\xdb\x18\xbb\xc5\x3f\xff\x63\x1d\xe3\x1e\x8d\x26\x0c\x3e\xc9\x42\x40\x3f\xe3\x7e\x88\xda\x7c\x4b\x18\x89\x62\x92\x65\xf9\x89\x34\xce\xfd\xca\x04\x57\x7e\x99\x64\x02\x11\x22\x96\xe6\x43\x5c\x5a\x31\xf4\xc2\xfe\xc4\x30\x51\x01\xc0\x9d\xd3\x7e\x90\x10\x17\x1a\x83\xbf\x03\x74\x79\xb3\x8a\x0b\x2f\xd1\x27\xd2\xde\xd8\x24\xe1\x86\x47\x67\x5d\x98\x16\x09\xb7\xf7\x0f\xcf\x3c\x7a\xed\xac\x3c\xf7\x7c\x33\x4b\x10\x53\x98\x89\x95\xa6\xd9\x32\x24\x3b\x1d\x30\xff\xe7\xb7\x80\x46\x6d\x37\x55\xad\x76\x5d\xd5\x3c\xa9\x8e\xc9\xfa\x43\xde\x00\x9c\x64\xd7\xaa\xe6\x6d\x5d\x2b\xf9\x57\x9e\xf8\xac\xc7\xb0\xed\x5e\x1b\x3e\xf0\xbe\xfd\x8f\x8e\x94\xe5\x2a\xa8\x1b\xf5\xa8\x5e\xba\x75\xb5\x69\x2f\xdd\x95\x15\xbf\x01\x00\x00\xff\xff\x2a\x56\xd5\xe8\x48\x01\x00\x00")

func importManifestYmlBytes() ([]byte, error) {
	return bindataRead(
		_importManifestYml,
		"import/manifest.yml",
	)
}

func importManifestYml() (*asset, error) {
	bytes, err := importManifestYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "import/manifest.yml", size: 328, mode: os.FileMode(420), modTime: time.Unix(1480436076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exportProcfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\x52\x28\xa8\x2c\xc9\xc8\xcf\x33\x56\x48\xad\x28\xc8\x2f\x2a\xd1\x2b\xa8\xe4\x02\x04\x00\x00\xff\xff\xc8\x71\x30\x6b\x17\x00\x00\x00")

func exportProcfileBytes() ([]byte, error) {
	return bindataRead(
		_exportProcfile,
		"export/Procfile",
	)
}

func exportProcfile() (*asset, error) {
	bytes, err := exportProcfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "export/Procfile", size: 23, mode: os.FileMode(420), modTime: time.Unix(1480436076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exportExportPy = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x3d\x6f\xdb\x30\x10\xdd\xf5\x2b\xae\xce\x40\x39\xb1\x95\xb6\x59\x8a\x00\x1e\x8a\xc0\x43\xa7\x16\x09\x92\xc5\x30\x04\x4a\xa2\x1c\x36\x12\xc9\x92\x54\x12\xa3\xed\x7f\xef\xf1\x43\x92\x13\xdb\x28\x0a\x64\xa8\x06\x87\xe4\xdd\x3d\xbe\xf7\x78\x64\x4e\xde\x9d\x77\x46\x9f\x17\x5c\x9c\x33\xf1\x08\x6a\x6b\xef\xa5\xb8\x48\x4e\x00\xe6\xa7\x73\x28\x65\xc5\xc5\xe6\x12\x3a\x5b\xcf\x3f\xb9\x95\x84\xb7\x4a\x6a\x0b\x66\x6b\xfa\xe1\x77\x23\x45\x3f\x96\x66\x1c\x65\x8a\xda\xfb\xa4\xd6\xb2\x45\x98\xb6\x95\x02\x62\xe8\x34\x49\x2a\x56\x43\x41\xcb\x87\x4e\xe5\xed\xd6\xfc\x68\x72\x2b\x73\x73\x91\x96\x9a\x55\x66\x06\x8f\x25\x55\xd3\xcb\x04\xf0\xa3\x65\xc9\x0c\x2e\x19\x86\x31\x3b\x83\xa2\x2b\x1f\xdc\x5f\xcd\x36\x1c\x11\x17\x50\x73\x51\x61\x69\x1e\x02\xb9\x47\x48\x3d\x80\xaf\xc7\x48\xd9\x56\x98\x57\x74\xbc\xf1\x89\xa5\x54\xdb\xdc\x11\xa2\xa2\x4a\x5f\xc3\x07\xd8\x7e\x9b\x00\x11\x08\x3a\xe0\x01\x66\x5c\xca\x8d\xd5\x81\x76\x48\x8e\xc0\x98\x49\x9c\xa5\x3e\xb1\xea\x5a\x05\x3f\x7f\xc3\x2f\xfc\x21\x59\x2d\x75\x4b\x6d\x3a\x42\xcc\x22\xc9\x00\x80\xbe\xa1\xb7\x96\xb5\x69\x84\x9a\xbe\x70\x4b\xfd\xe7\x66\xa9\x3d\xaf\xfc\x0a\xb6\xd6\x11\x97\xd0\x17\x67\x94\xda\xe4\xde\xa6\xf9\x3c\xf8\xb3\x28\x3b\x63\xb1\x73\x5e\x78\xa6\xfe\xcd\xb2\xe3\x6a\x2f\xa3\x5c\x24\xe0\xe6\x2b\x62\x2e\xc8\x7a\xf5\x7e\xbd\x22\x2e\x89\x09\xcb\x69\x63\xc8\xda\x67\xf1\x1a\x48\x50\x4a\x80\x0b\x2c\x0a\xc5\xee\x43\x17\x3a\xed\x96\x56\x24\x78\x93\x3f\xb0\x6d\xce\x2b\xb2\x9e\xf9\xc5\x60\x54\x3e\xc6\xfa\x40\x60\xd4\xcf\x22\x7a\xd8\xee\x0d\x30\x09\xd9\x6d\x99\x34\xaa\x45\x1d\x68\x14\x1e\x04\xd7\x52\xac\xc8\xdd\xd5\xe7\x6f\xf9\xcd\xf2\xfa\xee\xcb\xd5\xf2\x86\xac\x47\x51\xce\x10\xf4\xc5\xdd\xea\xac\x91\x14\x2d\x1b\xcb\xb2\x0d\xb3\xe9\xab\xd2\xe9\x74\x28\x35\x4c\x3f\x72\xe4\x15\x6d\x0d\xd9\xf4\xc9\xcc\x75\x65\xc8\x0c\x56\xeb\x29\x9c\xed\x44\x86\xd5\x01\x00\xcf\xb9\x07\xf1\x5e\x47\xbc\x91\x5c\x14\x12\x03\x2b\x22\x68\xcb\xc8\x1a\x16\x0b\x78\x4d\xf2\xe6\xeb\xed\xf5\xd5\xb2\xa7\x49\xa6\x2f\x31\x7c\x13\xba\x7e\x40\xaa\x03\xd8\xfe\xd9\xef\x7e\xaa\xa1\x62\x37\xdb\xcd\x0f\xa4\xb9\x76\xc1\x6e\x72\xf4\x9d\xd2\xfd\x6d\x63\xd2\xc4\x3f\x00\x13\x97\xe7\x90\x0e\xe7\xf9\x7d\x35\x17\x36\x9d\xd4\xb2\xc3\x0b\x53\xf8\x5f\x6c\xdc\x70\xda\xe0\x2e\x91\x07\x82\x8a\x5a\x5a\x50\xc3\x32\x78\xe2\x4d\x03\x56\x6f\xc1\x4a\x60\xcf\xfe\xc5\xc5\xd1\x50\x33\x99\x1e\xdd\xea\x2f\x2f\xf2\x51\x29\xea\x8d\x94\xa8\x37\x16\x72\xe4\xb1\x3c\x58\x16\xee\xdd\x5e\x88\x35\x86\x1d\x56\x14\xd5\xdc\x0a\x5a\x34\xcc\x11\xab\x58\xc9\x2b\x06\xf7\xf2\xc9\xcd\x02\x85\xe0\x08\x4c\xb0\xef\x7d\xff\x9c\xc1\x24\x83\xe5\x33\xb7\xf8\x5f\x35\x3b\x22\x00\xdf\xb2\x8c\x61\x4a\xfa\x21\x3e\xa9\x7b\x1b\xf5\xe8\x11\x60\x28\xf8\x88\x0f\x9f\x41\x1d\x78\xe7\x93\xfe\xf2\x27\xba\x13\xb9\x6b\x5a\xa6\x71\xf2\x27\x00\x00\xff\xff\xb5\xa1\x44\x92\xee\x07\x00\x00")

func exportExportPyBytes() ([]byte, error) {
	return bindataRead(
		_exportExportPy,
		"export/export.py",
	)
}

func exportExportPy() (*asset, error) {
	bytes, err := exportExportPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "export/export.py", size: 2030, mode: os.FileMode(420), modTime: time.Unix(1480436951, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _exportManifestYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcc\xc1\x4e\xc3\x30\x0c\x80\xe1\x7b\x9f\xc2\x2f\x90\x55\x80\xe0\xe0\x1b\xaa\x72\x40\x02\x0d\x75\xc0\x75\x4a\xd3\x40\x0d\x4b\x1c\x25\xee\x44\xdf\x1e\x57\x1d\x48\xdc\xe2\xcf\x7f\xec\x72\x3e\x91\x77\x42\x9c\x2a\x36\x06\x86\x99\x4e\x63\x76\xfe\x0b\x61\x12\xc9\x15\xdb\xf6\x83\x64\x9a\x87\x9d\xe7\xd8\x7e\xfa\xea\x59\x84\x88\x5a\xff\x6e\xfe\x5a\x33\x0e\x26\x7c\x67\x2e\xd2\x00\x68\x17\x5d\x1a\x11\xf2\x22\x13\xa7\x1b\xd8\x36\xbb\xbc\xe8\x92\x52\x15\x97\x7c\xa8\x08\x57\x3a\xc6\x10\xb9\x2c\x08\xd7\xb7\x77\x4f\x3a\x26\x17\x03\x5e\x7a\xbd\xb9\x0a\x9b\xc2\xb3\xa8\x4a\x99\x83\x42\x0d\xe5\x4c\xeb\x7f\x7d\x1b\xe8\xed\xf3\xe3\x7d\x67\x8f\x87\xfd\x6b\xdf\xd9\xff\xf4\xb2\xef\x57\x09\xe9\xbc\xb6\x00\x5b\x73\x3c\xd8\xfe\xed\xa1\xb3\xf8\x1b\x6e\x7c\xd1\xe6\x27\x00\x00\xff\xff\xaf\x08\xf4\xd3\x0f\x01\x00\x00")

func exportManifestYmlBytes() ([]byte, error) {
	return bindataRead(
		_exportManifestYml,
		"export/manifest.yml",
	)
}

func exportManifestYml() (*asset, error) {
	bytes, err := exportManifestYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "export/manifest.yml", size: 271, mode: os.FileMode(420), modTime: time.Unix(1480436076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pycommonCommonPy = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x4d\x6f\xe2\x3a\x14\xdd\xf3\x2b\x6e\xd3\x45\xc2\x53\x3e\x78\xea\xa6\x42\x62\xc1\x83\xbc\xb6\x9a\xd1\x80\x48\xaa\x6a\x34\xaa\x2c\x93\x98\x26\x9a\x24\x4e\x6d\x87\x0e\xaa\x3a\xbf\x7d\xae\xf3\x01\xa1\xa5\x55\x97\xc3\x22\xd8\xd7\xc7\xe7\x9e\x7b\x6e\x62\x9f\x9f\x79\x95\x14\xde\x3a\x2d\x3c\x56\x6c\xa1\xdc\xa9\x84\x17\x17\x83\x73\x00\xe7\x1f\x07\x22\x1e\xa7\xc5\xc3\x18\x2a\xb5\x71\x2e\x75\x64\x30\x48\xf3\x92\x0b\x05\x5c\x76\xa3\x44\xa9\xd2\x95\x4c\x6c\x99\xe8\x42\x92\x47\x3f\x99\x7a\x15\xdb\xc9\xc1\x20\x66\x1b\x58\x57\x69\x16\x93\x52\x3e\x66\x04\x33\x5a\x91\x60\xb1\x1c\x8e\x07\x80\x3f\xc1\x54\x25\x0a\x30\x97\x57\xd7\x8b\x20\x9c\x3c\xbf\xc0\xf2\x6a\x3e\x0d\xa7\xff\x4d\x03\xbf\x99\xdd\x06\xfe\xaa\x19\x2d\xa7\x41\x70\xb7\x58\xcd\x71\x66\xba\x1b\x2e\x72\xaa\x1a\xae\x1f\x66\xc2\xa5\x32\xef\x6d\x68\xa7\xf1\x9a\x14\x34\x67\xbd\x48\x85\xd2\x5e\x85\x4a\x2a\xe5\x13\x17\xb1\x79\x3f\xec\xcb\xcc\x77\x5a\xa7\xc6\x10\xa9\xc4\x49\xb1\x4e\x05\x28\xc8\x29\xf5\x23\xd1\xc3\xb7\x82\x3e\xcc\xb7\x0f\xbd\x27\x1b\x05\xf5\x14\xc9\x0b\x12\xf1\x72\x87\x8f\x3c\xa7\x45\x6c\xd1\x28\x62\x52\xda\x20\x19\xee\x53\x36\xca\x7a\x48\x79\x61\x23\x5a\xf7\xa0\xd5\x4a\x9f\x24\x4c\xe0\x81\x29\x82\x23\x12\x65\x29\xc9\x78\x44\x15\x02\xad\x61\x0d\xd0\xbd\x9f\xb4\x19\x34\x04\xe7\x64\x4b\xc5\x3b\xec\xc3\x23\x03\xea\x92\x41\x5e\x40\x54\x82\x83\xff\x63\xcf\x7b\x7e\xf1\xe2\xb5\x8b\xd6\xed\x9d\x40\x42\x5b\xcb\xd8\x0b\x7b\x55\x93\xd6\xf6\x77\x96\x74\x5c\x10\x38\x9f\x2b\xe9\x13\x19\xc7\x3d\x99\xe6\xf4\x2e\x20\xd3\xd9\xcc\x0f\x02\xf2\xc5\xff\x4e\x6e\xe6\x13\xe3\xf9\xc5\x00\x1d\x0e\xfc\xd9\xca\x0f\x7b\xab\xf5\xd2\x5e\xc6\x31\x7b\x53\x47\xba\x69\x93\xc0\x19\x72\x9b\x4d\xa6\x5e\x36\x2c\x4e\x33\xcf\xfd\xff\xa7\xb7\x5f\x43\xb2\xf2\xaf\x6e\x16\xdf\x8e\x69\xeb\xea\x4e\x78\x83\xf1\xa6\xce\xb4\x90\x8a\x66\x59\x67\xbf\x75\xfc\x59\x70\xe9\xe2\x17\xaf\x58\x6e\x19\x08\xc0\x75\x67\x5d\x15\x71\xc6\xbc\xe3\x59\x4b\x02\xce\x1a\x7e\xd7\x87\x10\x2e\x1b\xad\x91\xa7\x7b\x3b\xee\x0a\xc4\x0c\x25\x55\x89\x9b\xca\x4d\x9a\x31\xcb\xf0\x12\x9e\x33\x6f\x1b\xd1\xf2\x40\x74\x28\xbc\x95\x75\x0a\xd5\xb4\x21\xfb\x98\x92\x96\x9f\xa5\xed\x23\xfb\x8e\x18\x46\x53\x96\xc4\x69\xd9\x73\x6b\x4b\x33\x6c\xc9\x1b\x37\x0f\x7d\xac\x11\xd8\xc7\xd1\x21\x2d\x5a\xeb\xb2\x5f\xa9\xb2\xfe\x6d\xbd\x12\x55\x41\x9a\xf3\xb6\x63\x3e\x87\x99\x60\x54\x31\xa0\xd0\x2c\x60\x0a\xc0\x03\x07\x07\x8a\x43\xcc\x9f\x8a\x8c\xd3\x18\x54\xc2\x40\x17\x2b\xdd\x7a\xd7\x72\xb1\x0a\x6b\x35\xca\x42\x33\xb0\x03\xfa\x88\x36\x75\xd4\xb4\xc1\xbc\x1c\x8d\x46\xe6\x10\x53\x6a\xe8\x35\xd5\x1d\x14\x88\xee\xdd\x00\x6e\x80\xc7\x7d\xc6\xae\xc3\x70\xb9\x62\x8f\x15\x93\xaa\x85\x35\x7b\x34\x32\xc6\x1d\xfd\x0b\xc2\x0d\x67\xcb\xa0\x91\x6e\x19\x86\x5d\x4b\x18\xda\x1d\x7d\x9b\xac\x14\x5a\x92\xa1\x77\xe0\x85\x04\x54\x81\xbe\x54\x3a\xf4\x81\xbb\x91\x41\xf0\x1d\x66\xb5\x17\x83\x3f\x01\x00\x00\xff\xff\x0a\x12\xa8\x87\xe0\x06\x00\x00")

func pycommonCommonPyBytes() ([]byte, error) {
	return bindataRead(
		_pycommonCommonPy,
		"pycommon/common.py",
	)
}

func pycommonCommonPy() (*asset, error) {
	bytes, err := pycommonCommonPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pycommon/common.py", size: 1760, mode: os.FileMode(420), modTime: time.Unix(1480454852, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"import/Procfile": importProcfile,
	"import/import.py": importImportPy,
	"import/manifest.yml": importManifestYml,
	"export/Procfile": exportProcfile,
	"export/export.py": exportExportPy,
	"export/manifest.yml": exportManifestYml,
	"pycommon/common.py": pycommonCommonPy,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"export": &bintree{nil, map[string]*bintree{
		"Procfile": &bintree{exportProcfile, map[string]*bintree{}},
		"export.py": &bintree{exportExportPy, map[string]*bintree{}},
		"manifest.yml": &bintree{exportManifestYml, map[string]*bintree{}},
	}},
	"import": &bintree{nil, map[string]*bintree{
		"Procfile": &bintree{importProcfile, map[string]*bintree{}},
		"import.py": &bintree{importImportPy, map[string]*bintree{}},
		"manifest.yml": &bintree{importManifestYml, map[string]*bintree{}},
	}},
	"pycommon": &bintree{nil, map[string]*bintree{
		"common.py": &bintree{pycommonCommonPy, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

